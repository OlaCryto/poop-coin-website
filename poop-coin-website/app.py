import os
import json

from flask import Flask, session
from models import db
from config.settings import DevConfig, ProdConfig

# --- App Initialization ---
app = Flask(__name__)

# Select config class based on environment
env = os.environ.get('FLASK_ENV', 'production').lower()
if env == 'development':
    app.config.from_object(DevConfig)
else:
    app.config.from_object(ProdConfig)

app.secret_key = app.config['SECRET_KEY']
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs('static/images', exist_ok=True)

# --- DB Initialization ---
if app.config.get('SQLALCHEMY_DATABASE_URI'):
    db.init_app(app)


# --- Load Site Config ---
def load_site_config():
    cfg_path = os.path.join(os.path.dirname(__file__), 'site-config.json')
    try:
        if os.path.exists(cfg_path):
            with open(cfg_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            for k, v in data.items():
                if k.isupper():
                    app.config[k] = v
    except Exception:
        pass

def write_client_site_config():
    # Write a JS config file for the frontend
    js_path = os.path.join(os.path.dirname(__file__), 'static', 'js', 'site-config.js')
    config_keys = ['SITE_NAME', 'SITE_TAGLINE', 'PRIMARY_COLOR', 'LOGO_PATH']
    config = {k: app.config.get(k) for k in config_keys}
    js = f"// Generated by app.py - do not edit.\nwindow.SITE_CONFIG = {json.dumps(config)};\n"
    with open(js_path, 'w', encoding='utf-8') as f:
        f.write(js)

def sync_site_config():
    load_site_config()
    write_client_site_config()

# Initialize site config on startup
sync_site_config()

# --- Security Headers ---
from security.headers import setup_security, set_security_headers
setup_security(app)
app.after_request(set_security_headers)

# --- Context Processor ---
@app.context_processor
def inject_global_vars():
    from datetime import datetime
    user = session.get('user')
    return dict(
        AVAX_LOGO='https://cryptologos.cc/logos/avalanche-avax-logo.png',
        ARENA_LOGO='https://pbs.twimg.com/profile_images/1746564897225035776/uD6ltQpR.png',
        user=user,
        current_year=datetime.now().year,
        SITE_NAME=app.config.get('SITE_NAME', '$OHSHIT'),
        SITE_TAGLINE=app.config.get('SITE_TAGLINE', "$OHSHIT: The ultimate shitcoin on AVAX. Flush your FUD and join the dump!"),
        PRIMARY_COLOR=app.config.get('PRIMARY_COLOR', '#FFD700'),
        SECONDARY_COLOR=app.config.get('SECONDARY_COLOR', '#222'),
        FONT_FAMILY=app.config.get('FONT_FAMILY', 'Bangers, cursive'),
        LOGO_PATH=app.config.get('LOGO_PATH', '/static/images/happy_poop.png'),
    )

# --- Blueprints ---
from routes.web import web_bp
from routes.auth import auth_bp, init_oauth
from routes.holders import holders_bp
from routes.api import api_bp

init_oauth(app)
app.register_blueprint(web_bp)
app.register_blueprint(auth_bp)
app.register_blueprint(holders_bp)
app.register_blueprint(api_bp)

# --- Main ---
if __name__ == '__main__':
    debug_mode = os.environ.get('FLASK_DEBUG', '1') == '1' or os.environ.get('FLASK_ENV') == 'development'
    
    # Start bot simulator in background after a short delay
    def start_bot_simulator():
        time.sleep(2)  # Give Flask time to start
        from tasks.bot_simulator import bot_simulator
        bot_simulator()
    
    import threading
    import time
    threading.Thread(target=start_bot_simulator, daemon=True).start()
    
    # Always run in debug mode for auto-reload functionality
    app.run(
        debug=True, 
        use_reloader=True,
        host='127.0.0.1',
        port=5000,
        extra_files=[
            'site-config.json',
            'static/css/style.css',
            'static/js/main.js',
        ]
    )
